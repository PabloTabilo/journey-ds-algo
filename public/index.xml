<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Home on A Journey Through DS and Algorithms</title>
    <link>http://localhost:1313/</link>
    <description>Recent content in Home on A Journey Through DS and Algorithms</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Arithmetic, counting and modulus operations</title>
      <link>http://localhost:1313/math/arithmetic-counting-and-modulus/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/math/arithmetic-counting-and-modulus/</guid>
      <description>&lt;h1 id=&#34;arithmetic-counting-and-modulus-operations&#34;&gt;&#xD;&#xA;  Arithmetic, counting and modulus operations&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#arithmetic-counting-and-modulus-operations&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h1&gt;&#xD;&#xA;&lt;p&gt;In this article, we aim to enhance our pattern recognition abilities by leveraging fundamental mathematical skills such as arithmetic, counting, and modulus operations.&lt;/p&gt;&#xA;&lt;p&gt;To begin, we will explore a problem that encourages a deeper understanding of these techniques. This problem, known as &lt;code&gt;Digit Queries&lt;/code&gt;, is part of the CSES problem set.&lt;/p&gt;&#xA;&lt;h2 id=&#34;digit-queries---problem-statement&#34;&gt;&#xD;&#xA;  Digit Queries - Problem statement&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#digit-queries---problem-statement&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;p&gt;Consider an infinite string that consist of all positive integer in increasing order:&#xA;&lt;code&gt;12345678910111213141516171819202122232425...&lt;/code&gt;&#xA;Your task is to process $q$ queries of the form: what&amp;rsquo;s the digit at position $k$ in the string?&lt;/p&gt;</description>
    </item>
    <item>
      <title>DP Level 0</title>
      <link>http://localhost:1313/dynamic-programming-problems/dp-level-0/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/dynamic-programming-problems/dp-level-0/</guid>
      <description>&lt;h1 id=&#34;dp-level-0&#34;&gt;&#xD;&#xA;  DP Level 0&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#dp-level-0&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h1&gt;&#xD;&#xA;&lt;p&gt;Dynamic Programming (DP) problems generally involve the optimization of some discrete problem. This means that the solution typically revolves around breaking the problem into smaller subproblems, solving each of them, and combining the results to find the best possible answer.&lt;/p&gt;&#xA;&lt;p&gt;The objective of this problem is to find the &lt;strong&gt;minimum cost&lt;/strong&gt; while adhering to the given rules for valid passes.&lt;/p&gt;&#xA;&lt;h2 id=&#34;983-minimum-cost-for-tickets&#34;&gt;&#xD;&#xA;  983. Minimum Cost For Tickets&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#983-minimum-cost-for-tickets&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Level &lt;code&gt;medium&lt;/code&gt;.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;problem-statement&#34;&gt;&#xD;&#xA;  Problem statement&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#problem-statement&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;p&gt;You have planned some train traveling one year in advance. The days of the year in which you will travel are given as an integer array &lt;code&gt;days&lt;/code&gt;. Each day is an integer from &lt;code&gt;1&lt;/code&gt; to &lt;code&gt;365&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Easy Sort Problem</title>
      <link>http://localhost:1313/searching-and-sorting/easy-sort-problem/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/searching-and-sorting/easy-sort-problem/</guid>
      <description>&lt;h1 id=&#34;starting-with-sorting-problems&#34;&gt;&#xD;&#xA;  Starting with Sorting Problems&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#starting-with-sorting-problems&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h1&gt;&#xD;&#xA;&lt;p&gt;Let&amp;rsquo;s start by looking at this LeetCode problem to help you understand the core concepts. Together we&amp;rsquo;ll explore the different techniques and data structures you can use to solve it effectively.&lt;/p&gt;&#xA;&lt;h2 id=&#34;2593---find-score-of-an-array-after-marking-all-elements&#34;&gt;&#xD;&#xA;  2593 - Find Score of An Array After Marking All Elements&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2593---find-score-of-an-array-after-marking-all-elements&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Level &lt;code&gt;medium&lt;/code&gt;.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;problem-statement&#34;&gt;&#xD;&#xA;  Problem statement&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#problem-statement&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;p&gt;You are given an array &lt;code&gt;nums&lt;/code&gt; consisting of positive integers.&lt;/p&gt;&#xA;&lt;p&gt;Starting with &lt;code&gt;score = 0&lt;/code&gt;, apply the following algorithm:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Rabin - Karp algorithm</title>
      <link>http://localhost:1313/strings/rabinkarp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/strings/rabinkarp/</guid>
      <description>&lt;h1 id=&#34;rabin---karp-algorithm&#34;&gt;&#xD;&#xA;  Rabin - Karp Algorithm&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#rabin---karp-algorithm&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h1&gt;&#xD;&#xA;&lt;p&gt;The Rabin-Karp algorithm solves problems involving pattern matching within a string, where the complexity largely depends on the hash function used. This algorithm utilizes &lt;strong&gt;rolling hashing&lt;/strong&gt; for string searching.&lt;/p&gt;&#xA;&lt;p&gt;But what is rolling hashing?&lt;/p&gt;&#xA;&lt;h2 id=&#34;rolling-hashing&#34;&gt;&#xD;&#xA;  Rolling Hashing&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#rolling-hashing&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;p&gt;In simple terms, rolling hashing is a technique used to compute hash values efficiently for substrings of a string. It uses a sliding window approach, where the next window&amp;rsquo;s hash is updated based on the previous window instead of being recomputed from scratch.&lt;/p&gt;</description>
    </item>
    <item>
      <title>DP Level 1</title>
      <link>http://localhost:1313/dynamic-programming-problems/dp-level-1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/dynamic-programming-problems/dp-level-1/</guid>
      <description>&lt;h1 id=&#34;dp-level-1&#34;&gt;&#xD;&#xA;  DP Level 1&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#dp-level-1&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h1&gt;&#xD;&#xA;&lt;p&gt;Let’s dive into this LeetCode problem to uncover the foundational concepts of dynamic programming. Together, we’ll explore the key techniques and data structures specific to DP that will help you approach and solve it effectively.&lt;/p&gt;&#xA;&lt;h2 id=&#34;2466-count-ways-to-build-good-strings&#34;&gt;&#xD;&#xA;  2466. Count Ways To Build Good Strings&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2466-count-ways-to-build-good-strings&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Level &lt;code&gt;medium&lt;/code&gt;.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;problem-statement&#34;&gt;&#xD;&#xA;  Problem statement&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#problem-statement&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;p&gt;Given the integers &lt;code&gt;zero&lt;/code&gt;, &lt;code&gt;one&lt;/code&gt;, &lt;code&gt;low&lt;/code&gt;, and &lt;code&gt;high&lt;/code&gt;, we can construct a string by starting with an empty string, and then at each step perform either of the following:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Knuth-Morris-Pratt</title>
      <link>http://localhost:1313/strings/kmp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/strings/kmp/</guid>
      <description>&lt;h1 id=&#34;kmp&#34;&gt;&#xD;&#xA;  KMP&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#kmp&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h1&gt;&#xD;&#xA;&lt;h2 id=&#34;code&#34;&gt;&#xD;&#xA;  Code&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#code&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#00f;font-weight:bold&#34;&gt;Solution&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#b00040&#34;&gt;bool&lt;/span&gt; kmp_substr(string &lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&lt;/span&gt; s, &lt;span style=&#34;color:#b00040&#34;&gt;int&lt;/span&gt; sz){&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#b00040&#34;&gt;int&lt;/span&gt; n &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; s.length();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        vector&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#b00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; pi_s(n, &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#b00040&#34;&gt;int&lt;/span&gt; i&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;;i &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt; n;i&lt;span style=&#34;color:#666&#34;&gt;++&lt;/span&gt;){&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#b00040&#34;&gt;int&lt;/span&gt; j &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; pi_s[i&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;while&lt;/span&gt;(j &lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; s[i] &lt;span style=&#34;color:#666&#34;&gt;!=&lt;/span&gt; s[j]){&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                j &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; pi_s[j&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;if&lt;/span&gt;(s[i] &lt;span style=&#34;color:#666&#34;&gt;==&lt;/span&gt; s[j]){&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                j&lt;span style=&#34;color:#666&#34;&gt;++&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            pi_s[i] &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; j; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;if&lt;/span&gt;(j &lt;span style=&#34;color:#666&#34;&gt;&amp;gt;=&lt;/span&gt; sz){&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#008000&#34;&gt;true&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#008000&#34;&gt;false&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    vector&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;string&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; stringMatching(vector&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;string&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; words) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;auto&lt;/span&gt; comp &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; [](&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;auto&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&lt;/span&gt;l, &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;auto&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&lt;/span&gt;r){&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;if&lt;/span&gt;(l.length() &lt;span style=&#34;color:#666&#34;&gt;!=&lt;/span&gt; r.length()){&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt; l.length() &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt; r.length();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt; l &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt; r;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        };&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        sort(words.begin(), words.end(), comp);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;//cout &amp;lt;&amp;lt; &amp;#34;words:&amp;#34;; for(auto x : words) cout &amp;lt;&amp;lt; x &amp;lt;&amp;lt; &amp;#34; &amp;#34;; cout &amp;lt;&amp;lt; endl;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#b00040&#34;&gt;int&lt;/span&gt; cnt &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#b00040&#34;&gt;int&lt;/span&gt; n &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; words.size();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        vector&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;string&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; ans;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        string prev;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#b00040&#34;&gt;int&lt;/span&gt; i&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;;i&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;n;i&lt;span style=&#34;color:#666&#34;&gt;++&lt;/span&gt;){&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            string a &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; words[i];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;if&lt;/span&gt;(prev &lt;span style=&#34;color:#666&#34;&gt;==&lt;/span&gt; a) &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;continue&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#b00040&#34;&gt;int&lt;/span&gt; j&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;i&lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;;j&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;n;j&lt;span style=&#34;color:#666&#34;&gt;++&lt;/span&gt;){&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                string b &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; words[j];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;if&lt;/span&gt;(a.length() &lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; b.length()) &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                string t &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; a &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;#&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; b;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;if&lt;/span&gt;(kmp_substr(t, a.length())){&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    ans.push_back(a);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            prev &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; a;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt; ans;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;interesting-articles&#34;&gt;&#xD;&#xA;  Interesting Articles&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#interesting-articles&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://cp-algorithms.com/string/prefix-function.html&#34;&gt;https://cp-algorithms.com/string/prefix-function.html&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://usaco.guide/adv/string-search?lang=cpp&#34;&gt;https://usaco.guide/adv/string-search?lang=cpp&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;references&#34;&gt;&#xD;&#xA;  References&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#references&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Problem: &lt;a href=&#34;https://leetcode.com/problems/string-matching-in-an-array/?envType=daily-question&amp;amp;envId=2025-01-07&#34;&gt;https://leetcode.com/problems/string-matching-in-an-array/?envType=daily-question&amp;envId=2025-01-07&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>Legendre&#39;s Formula</title>
      <link>http://localhost:1313/math/legendres-formula/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/math/legendres-formula/</guid>
      <description>&lt;h1 id=&#34;legendres-formula&#34;&gt;&#xD;&#xA;  Legendre&amp;rsquo;s Formula&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#legendres-formula&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h1&gt;&#xD;&#xA;&lt;p&gt;Why do we need to understand this technique?&lt;br&gt;&#xA;In the CSES Problem Set, it is part of the introductory problems and serves as a foundational equation for building mathematical skills.&lt;/p&gt;&#xA;&lt;h2 id=&#34;problem-statement&#34;&gt;&#xD;&#xA;  Problem Statement:&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#problem-statement&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;p&gt;The original problem can be found here: &lt;a href=&#34;https://cses.fi/problemset/task/1618/&#34;&gt;CSES Problem 1618&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;The task is to calculate the number of trailing zeros in the factorial $n!$. For example, $20! = 2432902008176640000$, which has 4 trailing zeros.&lt;/p&gt;</description>
    </item>
    <item>
      <title>DP Level 2</title>
      <link>http://localhost:1313/dynamic-programming-problems/dp-level-2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/dynamic-programming-problems/dp-level-2/</guid>
      <description>&lt;h1 id=&#34;dp-level-2&#34;&gt;&#xD;&#xA;  DP Level 2&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#dp-level-2&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h1&gt;&#xD;&#xA;&lt;h1 id=&#34;references&#34;&gt;&#xD;&#xA;  References&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#references&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h1&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://leetcode.com/problems/number-of-ways-to-form-a-target-string-given-a-dictionary/description/&#34;&gt;https://leetcode.com/problems/number-of-ways-to-form-a-target-string-given-a-dictionary/description/&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>Modular Exponentiation</title>
      <link>http://localhost:1313/math/modular-exponentiation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/math/modular-exponentiation/</guid>
      <description>&lt;h1 id=&#34;modular-exponentiation&#34;&gt;&#xD;&#xA;  Modular Exponentiation&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#modular-exponentiation&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h1&gt;&#xD;&#xA;&lt;p&gt;Imagine you need to compute a value $a^e$ where $a&amp;gt;0$ and $e$ is a large positive integer. Calculating this directly can result in excessively large numbers, leading to overflow errors. To avoid this, we use modular arithmetic, where the result is calculated modulo a given number $m$. In mathematical terms, we aim to compute:&lt;/p&gt;&#xA;&lt;p&gt;$$a^e \mod m$$&lt;/p&gt;&#xA;&lt;p&gt;Where:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;$a&amp;gt;0$ and $e&amp;gt;0$, both are integers.&lt;/li&gt;&#xA;&lt;li&gt;$m$ is the modulus, typically chosen to constrain the result within manageable bounds.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;why-modular-exponentiation-&#34;&gt;&#xD;&#xA;  Why Modular Exponentiation ?&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#why-modular-exponentiation-&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;p&gt;For example, $2^{1000}$. Calculating this value directly would involve a massive number, making it computationally infeasible due to both time complexity and memory constraints. Modular exponentiation is a technique designed to handle this efficiently.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Fermat&#39;s little Theorem</title>
      <link>http://localhost:1313/math/fermats-little-theorem/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/math/fermats-little-theorem/</guid>
      <description>&lt;h1 id=&#34;fermats-little-theorem&#34;&gt;&#xD;&#xA;  Fermat&amp;rsquo;s Little Theorem&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#fermats-little-theorem&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h1&gt;&#xD;&#xA;&lt;p&gt;If $p$ is a prime number and $a$ is an integer such that $a$ is not divisible by $p$, then:&lt;/p&gt;&#xA;&lt;p&gt;$$a^{p-1} \equiv 1 \pmod{p}$$&lt;/p&gt;&#xA;&lt;h2 id=&#34;modular-inverse-using-fermats-little-theorem&#34;&gt;&#xD;&#xA;  Modular Inverse using Fermat&amp;rsquo;s Little Theorem&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#modular-inverse-using-fermats-little-theorem&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;p&gt;The above theorem can be rearranged to give the modular inverse of $a$:&lt;/p&gt;&#xA;&lt;p&gt;$$a^{-1} \equiv a^{p-2} \pmod{p}$$&lt;/p&gt;&#xA;&lt;p&gt;This allows us to calculate the inverse of $a$ under modulo $p$, which is useful for division in modular arithmetic.&#xA;Example problem for use this technique: &lt;a href=&#34;https://codeforces.com/contest/2008/problem/F&#34;&gt;https://codeforces.com/contest/2008/problem/F&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Dequeue</title>
      <link>http://localhost:1313/data-structures/dequeue/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/data-structures/dequeue/</guid>
      <description>&lt;h1 id=&#34;dequeue&#34;&gt;&#xD;&#xA;  Dequeue&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#dequeue&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h1&gt;&#xD;&#xA;&lt;h2 id=&#34;whats-a-dequeue&#34;&gt;&#xD;&#xA;  What&amp;rsquo;s a dequeue?&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#whats-a-dequeue&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;p&gt;Is a generalize version of a queue with double Ended, where we can insert and delete elements at boths sides.&lt;/p&gt;&#xA;&lt;p&gt;So, in any problem when we need to pop or push elements fast on $O(1)$ this data structure is very util.&lt;/p&gt;&#xA;&lt;h2 id=&#34;problem---find-longest-special-substring-that-occurs-thrice-i&#34;&gt;&#xD;&#xA;  Problem - find longest special substring that occurs thrice I&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#problem---find-longest-special-substring-that-occurs-thrice-i&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;p&gt;You are given a string &lt;code&gt;s&lt;/code&gt; that consists of lowercase English letters.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Graphs</title>
      <link>http://localhost:1313/data-structures/graphs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/data-structures/graphs/</guid>
      <description>&lt;h1 id=&#34;graph-problems&#34;&gt;&#xD;&#xA;  Graph Problems&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#graph-problems&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h1&gt;&#xD;&#xA;&lt;p&gt;Content for Graph Problems goes here.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Segment Tree</title>
      <link>http://localhost:1313/data-structures/segment-tree/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/data-structures/segment-tree/</guid>
      <description>&lt;h1 id=&#34;segment-tree&#34;&gt;&#xD;&#xA;  Segment Tree&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#segment-tree&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h1&gt;&#xD;&#xA;&lt;p&gt;Content for Segment Tree problems goes here.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
