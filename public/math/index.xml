<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Math Problems on A Journey Through DS and Algorithms</title>
    <link>https://github.com/PabloTabilo/journey-ds-algo/math/</link>
    <description>Recent content in Math Problems on A Journey Through DS and Algorithms</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <atom:link href="https://github.com/PabloTabilo/journey-ds-algo/math/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Modular Exponentiation</title>
      <link>https://github.com/PabloTabilo/journey-ds-algo/math/modular-exponentiation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://github.com/PabloTabilo/journey-ds-algo/math/modular-exponentiation/</guid>
      <description>&lt;h1 id=&#34;modular-exponentiation&#34;&gt;&#xD;&#xA;  Modular Exponentiation&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#modular-exponentiation&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h1&gt;&#xD;&#xA;&lt;p&gt;Imagine you need to compute a value $a^e$ where $a &amp;gt; 0$ and $e$ is a large positive integer. Calculating this directly can result in excessively large numbers, leading to overflow errors.&lt;/p&gt;&#xA;&lt;h2 id=&#34;why-modular-exponentiation&#34;&gt;&#xD;&#xA;  Why Modular Exponentiation?&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#why-modular-exponentiation&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;p&gt;For example, $2^{1000}$. Calculating this value directly would involve a massive number, making it computationally infeasible.&lt;/p&gt;&#xA;&lt;h2 id=&#34;algorithm&#34;&gt;&#xD;&#xA;  Algorithm&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#algorithm&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;p&gt;The method uses divide-and-conquer principles to reduce complexity from $O(e)$ to $O(\log e)$.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
